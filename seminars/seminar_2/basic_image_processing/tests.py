import numpy as np


def test_he(he_func):
    source = np.linspace(0, 1., 255)
    output = he_func(source)
    assert np.max(np.abs(output - source)) <= 1
    print("---------------")
    print("OK, + 1 балл")

    
def test_conv(conv):
    source = np.random.randn(300, 300)
    
    target = np.zeros_like(source)
    target[:, :-1] = source[:, 1:]
    
    def kernel(window):
        # only 3x3 size
        return window[1, 2]
    
    output = conv(source, kernel, kernel_size=3, padd=1, fill_mode='constant')
    
    assert np.max(np.abs(output - target)) <= 1e-7
    print("---------------")
    print("OK, + 1 балл")
    

def test_lahe(conv, lahe_kernel):
    source = np.array(
        [[0.4346452 , 0.8331211 , 0.76620636, 0.71677873, 0.31443557,
        0.08207991, 0.52156099, 0.52575208, 0.26568573, 0.144909  ],
       [0.333938  , 0.13177674, 0.29267378, 0.32500833, 0.22363042,
        0.43687661, 0.3349686 , 0.96919732, 0.02568003, 0.41823252],
       [0.75831483, 0.21247857, 0.92941815, 0.39021197, 0.24267186,
        0.0703837 , 0.07445464, 0.14386213, 0.77615911, 0.28129847],
       [0.40615245, 0.11903407, 0.52712438, 0.76760042, 0.14786502,
        0.54599041, 0.19953814, 0.60328941, 0.69699754, 0.5747104 ],
       [0.39925039, 0.21710982, 0.20421255, 0.61187445, 0.39422413,
        0.65322182, 0.45437004, 0.90836762, 0.36391325, 0.86975596],
       [0.44212487, 0.95830774, 0.98867186, 0.84258849, 0.85782005,
        0.16980592, 0.78816615, 0.13518388, 0.51740879, 0.33179318],
       [0.34184284, 0.95108833, 0.02370286, 0.40211533, 0.75555853,
        0.47923984, 0.28029755, 0.32588106, 0.31409163, 0.42678036],
       [0.126378  , 0.37293069, 0.16570332, 0.25714639, 0.74879371,
        0.40315102, 0.36988193, 0.20952188, 0.28550916, 0.66534719],
       [0.37010504, 0.35351594, 0.42654266, 0.35989377, 0.62925331,
        0.17944692, 0.17020529, 0.81446062, 0.21649099, 0.75245963],
       [0.43782578, 0.13533907, 0.70623202, 0.20644233, 0.85667847,
        0.64039576, 0.19637898, 0.72209081, 0.38742741, 0.33776965]]
    )
    target = np.array(
       [[0.6 , 0.92, 0.88, 0.84, 0.48, 0.2 , 0.8 , 0.84, 0.44, 0.36],
       [0.56, 0.24, 0.4 , 0.6 , 0.28, 0.68, 0.6 , 1.  , 0.16, 0.48],
       [0.76, 0.28, 1.  , 0.56, 0.32, 0.04, 0.12, 0.2 , 0.88, 0.32],
       [0.6 , 0.08, 0.68, 0.8 , 0.12, 0.64, 0.32, 0.72, 0.76, 0.56],
       [0.48, 0.32, 0.16, 0.64, 0.44, 0.76, 0.56, 1.  , 0.48, 0.92],
       [0.68, 0.96, 1.  , 0.84, 0.96, 0.12, 0.92, 0.04, 0.68, 0.44],
       [0.4 , 0.88, 0.04, 0.52, 0.84, 0.6 , 0.28, 0.4 , 0.4 , 0.64],
       [0.12, 0.56, 0.16, 0.28, 0.76, 0.56, 0.48, 0.24, 0.36, 0.8 ],
       [0.56, 0.48, 0.68, 0.44, 0.8 , 0.16, 0.08, 1.  , 0.32, 0.84],
       [0.92, 0.16, 0.88, 0.24, 1.  , 0.76, 0.2 , 0.84, 0.72, 0.52]]
    )
    output = conv(source, lahe_kernel, kernel_size=5, padd=2, fill_mode='reflect')
    assert np.max(np.abs(output - target)) <= 1e7
    print("---------------")
    print("OK, + 1 балл")
    
    
def test_median(conv, median_filter):
    source = np.array(
        [[ 1.22299688, -0.11884335,  1.49649802, -0.03688264, -1.29973803,
        -1.96269137,  1.620161  ,  1.19417839, -0.63320902,  0.30112818],
       [ 0.71181934,  0.68247108, -0.06022619,  0.44404253, -0.67047359,
         0.92002031,  1.13032841,  0.79873791,  2.14611603, -1.44934215],
       [-0.21311236, -0.83805305,  1.79945486, -1.28709891,  1.16528559,
        -1.84262618,  0.60486032,  0.52133277, -0.03845169, -0.11446646],
       [ 0.05963037, -1.03186759,  0.52527142,  0.59370338,  1.76618144,
        -0.09826674, -0.50965832,  0.96099617,  1.60813945,  0.08769952],
       [-1.70087713,  1.44521721,  0.35283293,  0.94675991,  0.00599465,
         0.68216333, -0.85881745,  0.97116507,  0.81652145, -1.15374025],
       [ 0.4219678 ,  0.83355529, -1.09943433, -0.36403475,  1.03189966,
         0.2560204 ,  0.68119896, -0.4547294 , -0.75933167, -0.38221854],
       [-1.13775537,  0.51003576, -1.20684715,  1.87361245, -1.65130854,
        -2.73216424,  0.58396875, -1.05143587,  1.09050737,  0.7534857 ],
       [-0.78752249,  2.02325567,  0.12279425, -1.01927667,  0.90818941,
        -0.12611316, -0.78675526, -0.49786145,  1.48661615, -0.26998372],
       [ 1.65281302, -0.6738595 , -0.61875897,  1.43731585,  0.72309621,
         0.55171509,  1.15658531,  0.06550582,  0.354135  , -0.42152074],
       [ 2.44338957,  0.1975201 , -0.22233118, -0.21023429, -1.74291145,
        -0.67914514,  0.22600804,  1.55889038,  0.03438678,  1.76065191]]
    )
    target = np.array(
       [[ 0.68247108, -0.03688264, -0.03688264, -0.06022619,  0.44404253,
         0.52133277,  0.60486032,  0.52133277,  0.52133277,  0.52133277],
       [ 0.52527142,  0.44404253,  0.44404253, -0.03688264,  0.44404253,
         0.59370338,  0.79873791,  0.60486032,  0.79873791,  0.79873791],
       [ 0.35283293,  0.35283293,  0.35283293,  0.35283293,  0.44404253,
         0.59370338,  0.68216333,  0.52133277,  0.60486032,  0.79873791],
       [ 0.35283293,  0.4219678 ,  0.4219678 ,  0.44404253,  0.44404253,
         0.59370338,  0.68119896,  0.2560204 ,  0.52133277,  0.52133277],
       [ 0.35283293,  0.35283293,  0.35283293,  0.35283293,  0.35283293,
         0.52133277,  0.52133277,  0.08769952,  0.52133277,  0.52133277],
       [ 0.35283293,  0.4219678 ,  0.35283293,  0.35283293,  0.12279425,
         0.00599465,  0.2560204 , -0.09826674,  0.58396875,  0.7534857 ],
       [ 0.12279425,  0.4219678 ,  0.35283293,  0.35283293,  0.2560204 ,
         0.2560204 ,  0.354135  ,  0.06550582,  0.354135  ,  0.06550582],
       [ 0.12279425,  0.1975201 ,  0.12279425, -0.12611316, -0.12611316,
         0.06550582,  0.22600804,  0.06550582,  0.22600804,  0.03438678],
       [-0.22233118,  0.12279425,  0.12279425, -0.12611316,  0.12279425,
         0.22600804,  0.354135  ,  0.22600804,  0.354135  ,  0.06550582],
       [ 0.12279425,  0.12279425,  0.12279425,  0.12279425,  0.12279425,
         0.06550582,  0.354135  ,  0.06550582,  0.22600804,  0.06550582]]
    )
    output = conv(source, median_filter, kernel_size=5, padd=2, fill_mode='reflect')
    assert np.max(np.abs(output - target)) <= 1e7
    print("---------------")
    print("OK, + 1 балл")
    
    
def test_sobel(sobel):
    source = np.array(
       [[ 0.02166049,  1.88951129, -2.0256658 ,  0.78511934, -1.06865233,
        -0.46160485, -0.15904517, -0.13162961,  0.29740772,  0.39816648],
       [ 1.01149518,  0.20405125, -0.31782421, -0.97187346, -0.73427448,
        -0.34375759,  1.11789102,  1.78653379, -0.66034502,  0.36743423],
       [ 0.92413801,  1.94618476,  2.46936551,  1.21334269, -0.3753287 ,
        -1.52851463, -0.4125994 , -0.52959505, -1.064693  , -0.11069888],
       [-0.3909317 ,  0.86755381, -0.94820663, -0.16472204,  0.01165552,
         0.07558137, -0.20544431,  0.77351771,  0.02100945,  0.40598104],
       [-0.90698658,  2.57617153,  1.53888193, -0.19282311, -0.46314382,
         0.15933446, -0.32778682, -0.64650518, -0.74415815,  1.07223932],
       [-1.21845472,  0.0907159 ,  0.09748848,  0.78844603,  0.64610837,
         0.60807901, -0.37240852,  0.22399168,  0.73503879, -0.11454185],
       [ 2.45652614,  1.36145682, -1.1208493 , -1.06413259, -1.00409626,
        -0.93946584,  0.84746651,  0.15505374, -0.81117095, -1.99394657],
       [ 0.70268239,  1.33218907,  0.24329401, -0.06010762,  0.61224659,
         1.58927895, -0.80414306,  0.27918129,  0.82810322,  1.07032955],
       [ 0.16337502, -1.07472927,  1.01912281, -0.26268504,  0.27407386,
         1.11227701, -0.20489544,  2.17998108, -0.09760339,  0.41993895],
       [ 0.28134317, -0.20977393,  1.51712368, -0.20734628,  0.74211683,
        -0.63763043,  1.05086496,  0.00627522, -1.86352585,  0.14502248]]
    )
    target = np.array(
       [[2.74766180e-16, 6.75329136e+00, 4.56063331e+00, 1.08112642e+00,
        1.23721667e+00, 5.52354531e+00, 4.92053327e+00, 2.64356630e+00,
        1.77860695e+00, 0.00000000e+00],
       [1.91830198e+00, 6.35293580e+00, 1.03596948e+01, 6.62881506e+00,
        2.83287501e+00, 4.88013227e+00, 5.92713924e+00, 4.46027989e+00,
        4.09324216e+00, 3.74193216e+00],
       [1.47784865e+00, 1.39550710e+00, 3.67987529e+00, 5.42894620e+00,
        5.35634019e+00, 1.58224504e+00, 5.81298334e+00, 3.90830593e+00,
        1.02519986e+00, 1.43980255e+00],
       [2.40227563e+00, 3.24490743e+00, 6.15948212e+00, 4.82089535e+00,
        1.91203636e+00, 3.38940234e+00, 2.35676343e+00, 6.39009004e-01,
        2.20938406e+00, 3.00694609e+00],
       [3.20872186e+00, 5.80608733e+00, 6.29517459e+00, 4.36929457e+00,
        2.85862625e+00, 1.81095119e+00, 1.34444566e+00, 7.45553023e-01,
        2.75478125e+00, 3.87012902e-01],
       [4.29759600e+00, 2.28670054e+00, 8.32313487e+00, 5.00572040e+00,
        3.05422175e+00, 1.56410275e+00, 2.10850978e+00, 2.71496452e+00,
        2.64191181e+00, 6.26639737e+00],
       [6.32522055e+00, 7.76973378e+00, 5.58783267e+00, 1.95901131e+00,
        1.71957907e+00, 1.96183595e+00, 5.24196667e-01, 6.21061123e-01,
        4.10134248e+00, 2.55587166e+00],
       [9.45867442e+00, 6.20553856e+00, 5.13232266e+00, 5.02223356e+00,
        7.23102226e+00, 4.56890885e+00, 2.02442838e+00, 4.08740035e+00,
        6.31055403e+00, 6.25490615e+00],
       [3.92660443e+00, 3.34198892e+00, 8.89836124e-01, 2.19676305e+00,
        4.49709804e+00, 3.21905084e+00, 1.90346566e+00, 1.74665588e+00,
        7.07282417e+00, 7.23387227e+00],
       [0.00000000e+00, 4.18305662e+00, 1.62894376e+00, 3.04011160e+00,
        1.88935580e+00, 3.40442330e-01, 3.42321944e+00, 5.61419752e+00,
        3.24258974e+00, 5.88784672e-17]]
    )
    output = sobel(source)
    assert np.max(np.abs(output - target)) <= 1e7
    print("---------------")
    print("OK, + 1 балл")
    
    
def test_max(conv, max_filter):
    source = np.array(
       [[-1.82429803,  1.33549175, -0.14180354,  0.50651847,  0.10987628,
         0.83073667,  1.55104427,  1.12099448, -1.63290097,  2.14521738],
       [-0.02936273, -1.30071333, -1.93124923, -0.25234705,  0.04329622,
        -0.88295538,  1.40316528,  2.35315746,  0.22552582,  0.33434163],
       [-0.55450905, -0.78156772,  0.32758029,  0.25610531, -0.49648165,
         0.70003702, -0.42338152, -0.990898  , -1.58495241, -1.64780513],
       [-0.43090498, -0.06072482,  0.80506518, -0.73288227, -1.27609357,
        -0.66198088, -0.0328889 ,  0.97191424,  0.1574756 , -0.35482673],
       [ 0.54832142, -0.78214781, -1.04849904,  0.16623426,  0.69867239,
         0.036104  , -1.52321917,  0.10854359,  0.79880364,  0.78407283],
       [ 1.32558824, -0.06954229,  0.28669551, -0.8676134 ,  0.91480994,
         1.17691732,  0.34340685,  1.13673393,  1.96999523,  0.71169118],
       [ 0.07197593, -2.62324401, -0.92690551, -2.13844576,  0.39502603,
        -0.49373318,  0.70693986,  0.23453301,  1.10486373, -0.01465541],
       [-0.47599151, -1.49540628, -0.35407132, -0.69475704,  0.17521737,
        -0.67015728, -0.98256592, -0.71206187,  0.73013311, -0.06335297],
       [-0.51362557,  0.47496092, -0.60634815, -0.0243255 , -0.27542917,
        -0.96755849,  0.35005447, -0.03849009,  0.15902673, -0.88414107],
       [ 1.16767956, -0.78407185,  0.53067822, -0.97732359,  1.68003231,
         0.09894759,  1.02067023,  1.27856462,  0.70362362, -1.53071358]]
    )
    target = np.array(
       [[1.33549175, 1.33549175, 1.33549175, 1.33549175, 1.55104427,
        2.35315746, 2.35315746, 2.35315746, 2.35315746, 2.35315746],
       [1.33549175, 1.33549175, 1.33549175, 1.33549175, 1.55104427,
        2.35315746, 2.35315746, 2.35315746, 2.35315746, 2.35315746],
       [1.33549175, 1.33549175, 1.33549175, 1.33549175, 1.55104427,
        2.35315746, 2.35315746, 2.35315746, 2.35315746, 2.35315746],
       [1.32558824, 1.32558824, 1.32558824, 1.17691732, 1.40316528,
        2.35315746, 2.35315746, 2.35315746, 2.35315746, 2.35315746],
       [1.32558824, 1.32558824, 1.32558824, 1.17691732, 1.17691732,
        1.17691732, 1.96999523, 1.96999523, 1.96999523, 1.96999523],
       [1.32558824, 1.32558824, 1.32558824, 1.17691732, 1.17691732,
        1.17691732, 1.96999523, 1.96999523, 1.96999523, 1.96999523],
       [1.32558824, 1.32558824, 1.32558824, 1.17691732, 1.17691732,
        1.17691732, 1.96999523, 1.96999523, 1.96999523, 1.96999523],
       [1.32558824, 1.32558824, 1.68003231, 1.68003231, 1.68003231,
        1.68003231, 1.96999523, 1.96999523, 1.96999523, 1.96999523],
       [1.16767956, 1.16767956, 1.68003231, 1.68003231, 1.68003231,
        1.68003231, 1.68003231, 1.27856462, 1.27856462, 1.27856462],
       [1.16767956, 1.16767956, 1.68003231, 1.68003231, 1.68003231,
        1.68003231, 1.68003231, 1.27856462, 1.27856462, 1.27856462]]
    )
    output = conv(source, max_filter, kernel_size=5, padd=2, fill_mode='reflect')
    assert np.max(np.abs(output - target)) <= 1e7
    print("---------------")
    print("OK, + 1 балл")